{"version":3,"sources":["serviceWorker.js","util/hooks.js","util/graphql.js","components/PostForm.js","context/auth.js","util/MyPopup.js","components/LikeButton.js","components/DeleteButton.js","components/PostCard.js","pages/Home.js","pages/Login.js","pages/Register.js","components/MenuBar.js","pages/SinglePost.js","util/AuthRoute.js","App.js","ApolloProvider.js","index.js"],"names":["Boolean","window","location","hostname","match","useForm","callback","initialState","useState","values","setValues","onChange","event","target","name","value","onSubmit","preventDefault","FETCH_POSTS_QUERY","gql","CREATE_POST_MUTATION","PostForm","createPost","body","useMutation","variables","update","proxy","result","data","readQuery","query","getPosts","writeQuery","error","Form","Field","Input","placeholder","Button","type","color","className","style","marginBottom","graphQLErrors","message","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","payload","AuthProvider","props","useReducer","dispatch","Provider","setItem","token","MyPopup","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","username","onError","err","console","log","postId","likePost","likeButton","Icon","basic","as","Link","to","labelPosition","onClick","Label","pointing","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","confirmOpen","setConfirmOpen","mutation","filter","p","deletePostOrMutation","floated","margin","Confirm","open","onCancel","onConfirm","PostCard","createdAt","commentCount","useContext","Card","fluid","Content","Image","size","src","Header","Meta","moment","fromNow","Description","extra","Home","useQuery","loading","Grid","columns","Row","Column","Transition","Group","duration","map","key","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","_","history","push","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","email","confirmPassword","register","MenuBar","pathname","path","substring","activeItem","setActiveItem","handleItemClick","e","Menu","secondary","Item","active","position","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","params","commentInputRef","useRef","comment","setComment","current","blur","submitComment","getPost","comments","width","float","ref","disabled","trim","AuthRoute","Component","component","rest","render","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.89fa5085.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useState } from \"react\";\n\nexport const useForm = (callback, initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n  const onChange = (event) => {\n    setValues({ ...values, [event.target.name]: event.target.value });\n  };\n  const onSubmit = (event) => {\n    event.preventDefault();\n    callback();\n  };\n  return {\n    onChange,\n    onSubmit,\n    values,\n  };\n};\n","import gql from \"graphql-tag\";\n\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport { useForm } from \"../util/hooks\";\nimport { FETCH_POSTS_QUERY } from \"../util/graphql\";\n\nfunction PostForm() {\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\n    body: \"\",\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY,\n      });\n\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      values.body = \"\";\n    },\n  });\n\n  function createPostCallback() {\n    createPost();\n  }\n\n  return (\n    <>\n      <Form onSubmit={onSubmit}>\n        <h2>Post your article:</h2>\n        <Form.Field>\n          <Form.Input\n            placeholder=\"Type here...\"\n            name=\"body\"\n            onChange={onChange}\n            value={values.body}\n            error={error ? true : false}\n          />\n          <Button type=\"submit\" color=\"green\">\n            Submit\n          </Button>\n        </Form.Field>\n      </Form>\n      {error && (\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\n          <ul className=\"list\">\n            <li>{error.graphQLErrors[0].message}</li>\n          </ul>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id\n      body\n      createdAt\n      username\n      likes {\n        id\n        username\n        createdAt\n      }\n      likeCount\n      comments {\n        id\n        body\n        username\n        createdAt\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default PostForm;\n","import React, { useReducer, createContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\n\nconst initialState = {\n  user: null,\n};\n\nif (localStorage.getItem(\"jwtToken\")) {\n  const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem(\"jwtToken\");\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = createContext({\n  user: null,\n  login: (userData) => {},\n  logout: () => {},\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: null,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    localStorage.setItem(\"jwtToken\", userData.token);\n    dispatch({\n      type: \"LOGIN\",\n      payload: userData,\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem(\"jwtToken\");\n    dispatch({ type: \"LOGOUT\" });\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ user: state.user, login, logout }}\n      {...props}\n    />\n  );\n}\n\nexport { AuthContext, AuthProvider };\n","import { Popup } from \"semantic-ui-react\";\nimport React from \"react\";\n\nfunction MyPopup({ content, children }) {\n  return <Popup inverted content={content} trigger={children} />;\n}\n\nexport default MyPopup;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Button, Label, Icon } from \"semantic-ui-react\";\n\nimport MyPopup from \"../util/MyPopup\";\n\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\n  const [liked, setLiked] = useState(false);\n\n  useEffect(() => {\n    if (user && likes.find((like) => like.username === user.username)) {\n      setLiked(true);\n    } else setLiked(false);\n  }, [user, likes]);\n\n  const [likePost, { error }] = useMutation(LIKE_POST_MUTATION, {\n    onError(err) {\n      console.log(err);\n    },\n    variables: { postId: id },\n  });\n\n  const likeButton = user ? (\n    liked ? (\n      <Button color=\"green\">\n        <Icon name=\"thumbs up outline\" />\n      </Button>\n    ) : (\n      <Button color=\"green\" basic>\n        <Icon name=\"thumbs up outline\" />\n      </Button>\n    )\n  ) : (\n    <Button as={Link} to=\"/login\" color=\"green\" basic>\n      <Icon name=\"thumbs up outline\" />\n    </Button>\n  );\n\n  return (\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n      <MyPopup content={liked ? \"Unlike\" : \"Like\"}>{likeButton}</MyPopup>\n      <Label basic color=\"green\" pointing=\"left\">\n        {likeCount}\n      </Label>\n    </Button>\n  );\n}\n\nconst LIKE_POST_MUTATION = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      id\n      likes {\n        id\n        username\n      }\n      likeCount\n    }\n  }\n`;\n\nexport default LikeButton;\n","import React, { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Button, Confirm, Icon } from \"semantic-ui-react\";\nimport { FETCH_POSTS_QUERY } from \"../util/graphql\";\nimport MyPopup from \"../util/MyPopup\";\n\nfunction DeleteButton({ postId, commentId, callback }) {\n  const [confirmOpen, setConfirmOpen] = useState(false);\n\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n\n  const [deletePostOrMutation] = useMutation(mutation, {\n    update(proxy) {\n      setConfirmOpen(false);\n      if (!commentId) {\n        const data = proxy.readQuery({\n          query: FETCH_POSTS_QUERY,\n        });\n        data.getPosts = data.getPosts.filter((p) => p.id !== postId);\n\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      }\n\n      if (callback) callback();\n    },\n\n    variables: {\n      postId,\n      commentId,\n    },\n  });\n  return (\n    <>\n      <MyPopup content={commentId ? \"Delete comment\" : \"Delete post\"}>\n        <Button\n          as=\"div\"\n          color=\"red\"\n          floated=\"right\"\n          onClick={() => setConfirmOpen(true)}\n        >\n          <Icon name=\"trash\" style={{ margin: 0 }} />\n        </Button>\n      </MyPopup>\n      <Confirm\n        open={confirmOpen}\n        onCancel={() => setConfirmOpen(false)}\n        onConfirm={deletePostOrMutation}\n      />\n    </>\n  );\n}\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\n    deleteComment(postId: $postId, commentId: $commentId) {\n      id\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default DeleteButton;\n","import React, { useContext } from \"react\";\nimport { Button, Card, Icon, Label, Image } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport moment from \"moment\";\n\nimport { AuthContext } from \"../context/auth\";\nimport LikeButton from \"./LikeButton\";\nimport DeleteButton from \"./DeleteButton\";\nimport MyPopup from \"../util/MyPopup\";\n\nfunction PostCard({\n  post: { body, createdAt, id, username, likeCount, commentCount, likes },\n}) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <>\n      <Card fluid>\n        <Card.Content as={Link} to={`/posts/${id}`}>\n          <Image\n            floated=\"right\"\n            size=\"tiny\"\n            src=\"https://react.semantic-ui.com/images/avatar/large/elyse.png\"\n          />\n          <Card.Header>{username}</Card.Header>\n          <Card.Meta>{moment(createdAt).fromNow(true)}</Card.Meta>\n          <Card.Description>{body}</Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <LikeButton user={user} post={{ id, likes, likeCount }} />\n          <MyPopup content=\"Comment on post\">\n            <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n              <Button color=\"blue\" basic>\n                <Icon name=\"comments\" />\n              </Button>\n              <Label basic color=\"blue\" pointing=\"left\">\n                {commentCount}\n              </Label>\n            </Button>\n          </MyPopup>\n\n          {user && user.username === username && <DeleteButton postId={id} />}\n        </Card.Content>\n      </Card>\n    </>\n  );\n}\n\nexport default PostCard;\n","import React, { useContext } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\n// components\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { AuthContext } from \"../context/auth\";\nimport { FETCH_POSTS_QUERY } from \"../util/graphql\";\n// sem-ui\nimport { Grid, Transition } from \"semantic-ui-react\";\n// css\nimport \"../App.css\";\n\nfunction Home() {\n  const { user } = useContext(AuthContext);\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY);\n\n  return (\n    <Grid columns={3}>\n      <Grid.Row className=\"page-title\">\n        <h1>Recent Articles</h1>\n      </Grid.Row>\n      <Grid.Row>\n        {user && (\n          <Grid.Column>\n            <PostForm />\n          </Grid.Column>\n        )}\n        {loading ? (\n          <h1>Loading posts...</h1>\n        ) : (\n          <Transition.Group duration={1000}>\n            {data.getPosts &&\n              data.getPosts.map((post) => (\n                <Grid.Column key={post.id} style={{ marginBottom: 30 }}>\n                  <PostCard post={post} />\n                </Grid.Column>\n              ))}\n          </Transition.Group>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Home;\n","import React, { useContext, useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport { useForm } from \"../util/hooks\";\nimport { AuthContext } from \"../context/auth\";\n// css\nimport \"../App.css\";\n\nfunction Login(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(loginUserCallbak, {\n    username: \"\",\n    password: \"\",\n  });\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, result) {\n      context.login(result.data.login);\n      props.history.push(\"/\");\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values,\n  });\n  function loginUserCallbak() {\n    loginUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n        <h1>Login</h1>\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"Username..\"\n          name=\"username\"\n          type=\"text\"\n          value={values.username}\n          error={errors.username ? true : false}\n          onChange={onChange}\n        />\n\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          type=\"password\"\n          value={values.password}\n          error={errors.password ? true : false}\n          onChange={onChange}\n        />\n\n        <Button type=\"submit\" primary>\n          Login\n        </Button>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst LOGIN_USER = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Login;\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nimport { AuthContext } from \"../context/auth\";\nimport { useForm } from \"../util/hooks\";\n\nfunction Register(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(registerUser, {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {\n      context.login(userData);\n      props.history.push(\"/\");\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values,\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n        <h1>Register</h1>\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"Username..\"\n          name=\"username\"\n          type=\"text\"\n          value={values.username}\n          error={errors.username ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Email\"\n          placeholder=\"Email..\"\n          name=\"email\"\n          type=\"email\"\n          value={values.email}\n          error={errors.email ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          type=\"password\"\n          value={values.password}\n          error={errors.password ? true : false}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Confirm Password\"\n          placeholder=\"Confirm Password..\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={values.confirmPassword}\n          error={errors.confirmPassword ? true : false}\n          onChange={onChange}\n        />\n        <Button type=\"submit\" primary>\n          Register\n        </Button>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst REGISTER_USER = gql`\n  mutation register(\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\n\nexport default Register;\n","import React, { useContext, useState } from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { AuthContext } from \"../context/auth\";\n\nfunction MenuBar() {\n  const { user, logout } = useContext(AuthContext);\n  const pathname = window.location.pathname;\n  const path = pathname === \"/\" ? \"home\" : pathname.substring(1);\n  const [activeItem, setActiveItem] = useState(path);\n\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n\n  const menuBar = user ? (\n    <Menu pointing secondary size=\"massive\" color=\"green\">\n      <Menu.Item name={user.username} active as={Link} to=\"/\" />\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"logout\" onClick={logout} />\n      </Menu.Menu>\n    </Menu>\n  ) : (\n    <Menu pointing secondary size=\"massive\" color=\"green\">\n      <Menu.Item\n        name=\"home\"\n        active={activeItem === \"home\"}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/\"\n      />\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item\n          name=\"login\"\n          active={activeItem === \"login\"}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/login\"\n        />\n        <Menu.Item\n          name=\"register\"\n          active={activeItem === \"register\"}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/register\"\n        />\n      </Menu.Menu>\n    </Menu>\n  );\n\n  return menuBar;\n}\n\nexport default MenuBar;\n","import React, { useContext, useState, useRef } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport moment from \"moment\";\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label,\n} from \"semantic-ui-react\";\n\nimport { AuthContext } from \"../context/auth\";\nimport LikeButton from \"../components/LikeButton\";\nimport DeleteButton from \"../components/DeleteButton\";\nimport MyPopup from \"../util/MyPopup\";\n\nfunction SinglePost(props) {\n  const postId = props.match.params.postId;\n  const { user } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n\n  const [comment, setComment] = useState(\"\");\n\n  const { data = {} } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId,\n    },\n  });\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment(\"\");\n      commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment,\n    },\n  });\n\n  function deletePostCallback() {\n    props.history.push(\"/\");\n  }\n\n  let postMarkup;\n  if (data && !data.getPost) {\n    postMarkup = <p>Loading post..</p>;\n  } else {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount,\n    } = data.getPost;\n\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={2}>\n            <Image\n              src=\"https://react.semantic-ui.com/images/avatar/large/elyse.png\"\n              size=\"small\"\n              float=\"right\"\n            />\n          </Grid.Column>\n          <Grid.Column width={10}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <hr />\n              <Card.Content extra>\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\n                <MyPopup content=\"Comment on post\">\n                  <Button\n                    as=\"div\"\n                    labelPosition=\"right\"\n                    onClick={() => console.log(\"Comment on post\")}\n                  >\n                    <Button basic color=\"blue\">\n                      <Icon name=\"comments\" />\n                    </Button>\n                    <Label basic color=\"blue\" pointing=\"left\">\n                      {commentCount}\n                    </Label>\n                  </Button>\n                </MyPopup>\n                {user && user.username === username && (\n                  <DeleteButton postId={id} callback={deletePostCallback} />\n                )}\n              </Card.Content>\n            </Card>\n            {user && (\n              <Card fluid>\n                <Card.Content>\n                  <p>Post a comment</p>\n                  <Form>\n                    <div className=\"ui action input fluid\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Comment..\"\n                        name=\"comment\"\n                        value={comment}\n                        onChange={(event) => setComment(event.target.value)}\n                        ref={commentInputRef}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"ui button teal\"\n                        disabled={comment.trim() === \"\"}\n                        onClick={submitComment}\n                      >\n                        Submit\n                      </button>\n                    </div>\n                  </Form>\n                </Card.Content>\n              </Card>\n            )}\n            {comments.map((comment) => (\n              <Card fluid key={comment.id}>\n                <Card.Content>\n                  {user && user.username === comment.username && (\n                    <DeleteButton postId={id} commentId={comment.id} />\n                  )}\n                  <Card.Header>{comment.username}</Card.Header>\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{comment.body}</Card.Description>\n                </Card.Content>\n              </Card>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n  return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { AuthContext } from \"../context/auth\";\n\nfunction AuthRoute({ component: Component, ...rest }) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\n      }\n    />\n  );\n}\n\nexport default AuthRoute;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// components\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport MenuBar from \"./components/MenuBar\";\nimport SinglePost from \"./pages/SinglePost\";\nimport { AuthProvider } from \"./context/auth\";\nimport AuthRoute from \"./util/AuthRoute\";\n// sem-ui\nimport { Container } from \"semantic-ui-react\";\n\n// css\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport App from \"./App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { setContext } from \"apollo-link-context\";\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000\",\n});\n\nconst authLink = setContext(() => {\n  const token = localStorage.getItem(\"jwtToken\");\n  return {\n    headers: {\n      Authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nexport default (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n","import ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ApolloProvider from \"./ApolloProvider\";\n\nReactDOM.render(ApolloProvider, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}